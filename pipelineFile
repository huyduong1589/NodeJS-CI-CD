def CONTAINER_NAME="nodejs-express"
def CONTAINER_TAG="latest"
def DOCKER_HUB_USER="huyduong1589"
def HTTP_PORT_EX="8080"
def HTTP_PORT_DOCKER="3000"

node('AWS-EC2') {

    stage('Check Docker'){
        sh "whoami"
        sh "docker -v"
    }

    stage('Checkout') {
        checkout scm
    }

    stage('Build'){
        sh "pwd"
        sh "ls -lrt"
        dir("firebase-service") {
            sh "npm install"
        }
    }

    stage("Image Clean Up"){
        imageCleanUp(CONTAINER_NAME)
    }

    stage('Image Build'){
        imageBuild(CONTAINER_NAME, CONTAINER_TAG)
    }

    stage('Push to Docker Registry'){
        withCredentials([usernamePassword(credentialsId: 'DockerAccount', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
            pushToImage(CONTAINER_NAME, CONTAINER_TAG, USERNAME, PASSWORD)
        }
    }

    stage('Run App'){
        runApp(CONTAINER_NAME, CONTAINER_TAG, DOCKER_HUB_USER, HTTP_PORT_EX, HTTP_PORT_DOCKER)
    }

    stage('Test'){
        dir("firebase-service") {
            sh "node test/login_test.js"
        }
    }

}

def imageBuild(containerName, tag){
    sh "sudo docker build -t $containerName:$tag  -t $containerName --pull --no-cache ."
    echo "Image build complete"
}

def pushToImage(containerName, tag, dockerUser, dockerPassword){ 
    sh "sudo docker login -u $dockerUser -p $dockerPassword"
    sh "sudo docker tag $containerName:$tag $dockerUser/$containerName:$tag"
    sh "sudo docker push $dockerUser/$containerName:$tag"
    echo "Image push complete"
}

def runApp(containerName, tag, dockerHubUser, httpPortEX, httpPortDocker){
    sh "sudo docker pull $dockerHubUser/$containerName"
    sh "sudo docker run -d --rm -p $httpPortEX:$httpPortDocker --name $containerName $dockerHubUser/$containerName:$tag"
    echo "Application started on port: ${httpPortEX} (http)"
}

def imageCleanUp(containerName){
    try {
        sh "sudo docker image prune -f"
        sh "sudo docker stop $containerName"
    } catch(error){}
}